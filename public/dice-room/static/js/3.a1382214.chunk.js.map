{"version":3,"sources":["Room.jsx","App.jsx"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","VERIFY_USER","gql","CREATE_USER","GET_MESSAGES","CREATE_MESSAGE","CREATE_ROLL","MESSAGE_CREATED","Messages","scrollToBottom","messagesEnd","scrollIntoView","behavior","scrollToBottomFast","this","props","subscribeToNewMessages","id","className","messages","map","user","text","roll","parseInt","userId","name","diceCount","diceFaces","result","style","float","clear","ref","el","React","Component","MessageLoader","useQuery","loading","error","data","subscribeToMore","message","document","updateQuery","prev","subscriptionData","newMessage","messageCreated","Object","assign","Room","useMutation","verifyUser","createUser","createMessage","createRoll","useState","hasJoined","nameInput","state","stateSet","useEffect","localStorage","getItem","userName","variables","then","onSendMessage","length","e","console","log","isDiceMenuOpen","setDiceMenuOpen","onRoll","onJoin","setItem","onClick","type","autoFocus","autoComplete","value","placeholder","onChange","target","onKeyDown","keyCode","RoomWithProvider","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/3.a1382214.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { \r\n  ApolloClient,\r\n  ApolloProvider,\r\n  HttpLink,\r\n  split,\r\n  InMemoryCache, \r\n  gql,\r\n  useQuery,\r\n  useMutation,\r\n} from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\n\r\nimport './Room.css';\r\n\r\n// Build HTTP link to server.\r\nconst httpLink = new HttpLink({\r\n  uri: 'http://localhost:4000/graphql'\r\n});\r\n\r\n// Build WebSocket link to server.\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'ws://localhost:4000/subscriptions',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\n// Split link. This ensures we use the HTTP link for queries and mutations and the WebSocket link for subscriptions,\r\n// based on a bit of logic.\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  // uri: 'http://localhost:4000/graphql',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n// Define React hooks for interacting with GraphQL API.\r\nconst VERIFY_USER = gql`\r\n  mutation verifyUser($id: ID!, $name: String!) {\r\n    verifyUser(id: $id, name: $name)\r\n  }\r\n`;\r\n\r\nconst CREATE_USER = gql`\r\nmutation createUser($name: String!) {\r\n  createUser(name: $name) {\r\n    id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nconst GET_MESSAGES = gql`\r\n  query getMessages {\r\n    messages {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n      }\r\n      text\r\n      roll {\r\n        id\r\n        createdAt\r\n        diceCount\r\n        diceFaces\r\n        result\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_MESSAGE = gql`\r\n  mutation createMessage($userId: ID!, $text: String!) {\r\n    createMessage(userId: $userId, text: $text) {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n      }\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_ROLL = gql`\r\n  mutation createRoll($userId: ID!, $diceCount: Int!, $diceFaces: Int!) {\r\n    createRoll(userId: $userId, diceCount: $diceCount, diceFaces: $diceFaces) {\r\n      id\r\n      createdAt\r\n      user {\r\n        id\r\n        createdAt\r\n        name\r\n      }\r\n      diceCount\r\n      diceFaces\r\n      result\r\n    }\r\n  }\r\n`;\r\n\r\nconst MESSAGE_CREATED = gql`\r\n  subscription messageCreated {\r\n    messageCreated {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n      }\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nclass Messages extends React.Component {\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  }\r\n\r\n  scrollToBottomFast = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.subscribeToNewMessages();\r\n    this.scrollToBottomFast();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul id=\"messages\" className=\"messages\">\r\n        {this.props.messages.map(({id, user, text, roll}) => { return (\r\n          <li key={id} className={`message ${parseInt(this.props.userId) === parseInt(user.id) ? \"self\" : \"\"}`}>\r\n            <div className=\"message-name\">\r\n              {parseInt(this.props.userId) !== parseInt(user.id) ? (\r\n                <>{user.name}</>) : (\r\n                <></>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"message-text\">\r\n              {roll ? (\r\n                <span>\r\n                  <em>{roll.diceCount}d{roll.diceFaces}</em> &#8594; <strong>{roll.result}</strong>\r\n                </span>\r\n              ) : (\r\n                <span>\r\n                  {text}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </li>\r\n        )})}\r\n        <div style={{ float:\"left\", clear: \"both\" }}\r\n             ref={(el) => { this.messagesEnd = el; }}>\r\n        </div>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nfunction MessageLoader(props) {\r\n  const { loading, error, data, subscribeToMore } = useQuery(GET_MESSAGES);\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <Messages\r\n      messages={data.messages}\r\n      userId={props.userId}\r\n      subscribeToNewMessages={() =>\r\n        subscribeToMore({\r\n          document: MESSAGE_CREATED,\r\n          updateQuery: (prev, { subscriptionData }) => {\r\n            if (!subscriptionData.data) return prev;\r\n            const newMessage = subscriptionData.data.messageCreated;\r\n            return Object.assign({}, prev, {\r\n              messages: [...prev.messages, newMessage]\r\n            })\r\n          }\r\n        })\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction Room() {\r\n  const [verifyUser] = useMutation(VERIFY_USER);\r\n  const [createUser] = useMutation(CREATE_USER);\r\n  const [createMessage] = useMutation(CREATE_MESSAGE);\r\n  const [createRoll] = useMutation(CREATE_ROLL);\r\n  const [state, stateSet] = React.useState({\r\n    hasJoined: false,\r\n    nameInput: '',\r\n    user: {\r\n      id: 0,\r\n      name: 'Guest',\r\n    },\r\n    text: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check local storage for user info.\r\n    var hasJoined = localStorage.getItem('hasJoined') === 'true';\r\n    var userId = localStorage.getItem('userId') ? parseInt(localStorage.getItem('userId')) : 0;\r\n    var userName = localStorage.getItem('userName') ? localStorage.getItem('userName') : 'Guest';\r\n    \r\n    // Verify that user in local storage exists on server.\r\n    verifyUser({\r\n      variables: { id: userId, name: userName },\r\n    }).then(result => {\r\n      // If it does, continue as that user. If not, need to join.\r\n      if (result.data.verifyUser) {\r\n        stateSet({\r\n          hasJoined: hasJoined,\r\n          nameInput: '',\r\n          user: {\r\n            id: userId,\r\n            name: userName,\r\n          },\r\n          text: '',\r\n        });\r\n      } else {\r\n        stateSet({\r\n          hasJoined: false,\r\n          nameInput: '',\r\n          user: {\r\n            id: 0,\r\n            name: 'Guest',\r\n          },\r\n          text: '',\r\n        });\r\n      }\r\n    });\r\n  }, [verifyUser, state.user.id]);\r\n\r\n  // Function for handling sending of new messages.\r\n  const onSendMessage = () => {\r\n    if (state.text.length > 0) {\r\n      try {\r\n        createMessage({\r\n          variables: { userId: state.user.id, text: state.text },\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n\r\n    stateSet({\r\n      ...state,\r\n      text: '',\r\n    });\r\n  }\r\n\r\n  // Function for opening and closing the dice tray.\r\n  const [isDiceMenuOpen, setDiceMenuOpen] = React.useState(false);\r\n  const onClickDiceMenu = () => {\r\n    setDiceMenuOpen(!isDiceMenuOpen)\r\n  }\r\n\r\n  // Function for handling rolling of dice.\r\n  const onRoll = (diceCount, diceFaces) => {\r\n    try {\r\n      createRoll({\r\n        variables: { userId: state.user.id, diceCount: diceCount, diceFaces: diceFaces },\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  // Function for handling creating user model.\r\n  const onJoin = () => {\r\n    // Only enable join function for those who haven't joined yet.\r\n    if (!state.hasJoined) {\r\n      if (state.nameInput.length > 0) {\r\n        try {\r\n          createUser({\r\n            variables: { name: state.nameInput },\r\n          }).then(result => {\r\n            // Update state with assigned user ID and name.\r\n            stateSet({\r\n              ...state,\r\n              user: {\r\n                id: result.data.createUser.id,\r\n                name: result.data.createUser.name,\r\n              },\r\n              hasJoined: true,\r\n            });\r\n\r\n            localStorage.setItem('hasJoined', true);\r\n            localStorage.setItem('userId', result.data.createUser.id);\r\n            localStorage.setItem('userName', result.data.createUser.name);\r\n          });\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div id=\"outer-container\" className=\"container\">\r\n      <h1>Dice Bazaar</h1>\r\n      {/* TODO scroll down on new message event */}\r\n      <MessageLoader userId={state.user.id} />\r\n\r\n      {state.hasJoined ? (\r\n        <div className=\"form-container has-dice\">\r\n          <div id=\"dice-modal\" className={isDiceMenuOpen ? \"active\" : null}>\r\n            <div id=\"dice-menu-icon\" onClick={() => onClickDiceMenu()}>\r\n              🎲\r\n            </div>\r\n            <div id=\"dice-container\" className=\"dice-container\">\r\n              <button onClick={() => onRoll(1, 100)}>d100</button>\r\n              <button onClick={() => onRoll(1, 20)}>d20</button>\r\n              <button onClick={() => onRoll(1, 12)}>d12</button>\r\n              <button onClick={() => onRoll(1, 10)}>d10</button>\r\n              <button onClick={() => onRoll(1, 8)}>d8</button>\r\n              <button onClick={() => onRoll(1, 6)}>d6</button>\r\n              <button onClick={() => onRoll(1, 4)}>d4</button>\r\n            </div>\r\n            <div id=\"dice-container-triangle\" ></div>\r\n          </div>\r\n\r\n          <input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            id=\"text\"\r\n            autoFocus\r\n            autoComplete=\"off\"\r\n            value={state.text}\r\n            placeholder=\"Enter a message...\"\r\n            onChange={(e) => stateSet({\r\n                ...state,\r\n                text: e.target.value,\r\n              })\r\n            }\r\n            onKeyDown={(e) => {\r\n              if (e.keyCode === 13) {\r\n                onSendMessage();\r\n              }\r\n            }}\r\n          />\r\n\r\n          <button onClick={() => onSendMessage()}>Send</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"form-container\"> \r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            id=\"username\"\r\n            autoFocus\r\n            autoComplete=\"off\"\r\n            value={state.nameInput}\r\n            placeholder=\"Choose a name...\"\r\n            onChange={(e) => stateSet({\r\n              ...state,\r\n              nameInput: e.target.value,\r\n            })}\r\n            onKeyDown={(e) => {\r\n              if (e.keyCode === 13) {\r\n                onJoin();\r\n              }\r\n            }}\r\n          />\r\n\r\n          <button onClick={() => onJoin()}>Join</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n};\r\n\r\nconst RoomWithProvider = () => (\r\n  <ApolloProvider client={client}>\r\n    <Room />\r\n  </ApolloProvider>\r\n);\r\n\r\nexport default RoomWithProvider;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from \"./Room\";\n\nconst App = () => <Room />;\n\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}