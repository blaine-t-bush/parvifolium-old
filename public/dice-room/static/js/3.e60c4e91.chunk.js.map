{"version":3,"sources":["Room.jsx","App.jsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","VERIFY_USER","gql","CREATE_USER","GET_MESSAGES","CREATE_MESSAGE","CREATE_ROLL","Messages","scrollToBottom","messagesEnd","scrollIntoView","behavior","scrollToBottomFast","this","id","className","props","messages","map","user","text","roll","parseInt","userId","name","diceCount","diceFaces","result","style","float","clear","ref","el","React","Component","MessageLoader","useQuery","pollInterval","loading","error","data","message","Room","useMutation","verifyUser","createUser","createMessage","createRoll","useState","hasJoined","nameInput","state","stateSet","useEffect","localStorage","getItem","userName","variables","then","onSendMessage","length","e","console","log","isDiceMenuOpen","setDiceMenuOpen","onRoll","onJoin","setItem","onClick","type","autoFocus","autoComplete","value","placeholder","onChange","target","onKeyDown","keyCode","RoomWithProvider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/3.e60c4e91.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { \n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  split,\n  InMemoryCache, \n  gql,\n  useQuery,\n  useMutation,\n} from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport './Room.css';\n\nconst client = new ApolloClient({\n  uri: 'https://parvifolium.net/dice-room-server',\n  cache: new InMemoryCache()\n});\n\n// Define React hooks for interacting with GraphQL API.\nconst VERIFY_USER = gql`\n  mutation verifyUser($id: ID!, $name: String!) {\n    verifyUser(id: $id, name: $name)\n  }\n`;\n\nconst CREATE_USER = gql`\nmutation createUser($name: String!) {\n  createUser(name: $name) {\n    id\n    name\n  }\n}\n`;\n\nconst GET_MESSAGES = gql`\n  query getMessages {\n    messages {\n      id\n      user {\n        id\n        name\n      }\n      text\n      roll {\n        id\n        createdAt\n        diceCount\n        diceFaces\n        result\n      }\n    }\n  }\n`;\n\nconst CREATE_MESSAGE = gql`\n  mutation createMessage($userId: ID!, $text: String!) {\n    createMessage(userId: $userId, text: $text) {\n      id\n      user {\n        id\n        name\n      }\n      text\n    }\n  }\n`;\n\nconst CREATE_ROLL = gql`\n  mutation createRoll($userId: ID!, $diceCount: Int!, $diceFaces: Int!) {\n    createRoll(userId: $userId, diceCount: $diceCount, diceFaces: $diceFaces) {\n      id\n      createdAt\n      user {\n        id\n        createdAt\n        name\n      }\n      diceCount\n      diceFaces\n      result\n    }\n  }\n`;\n\nclass Messages extends React.Component {\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  scrollToBottomFast = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"auto\" });\n  }\n\n  componentDidMount() {\n    this.scrollToBottomFast();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  render() {\n    return (\n      <ul id=\"messages\" className=\"messages\">\n        {this.props.messages.map(({id, user, text, roll}) => { return (\n          <li key={id} className={`message ${parseInt(this.props.userId) === parseInt(user.id) ? \"self\" : \"\"}`}>\n            <div className=\"message-name\">\n              {parseInt(this.props.userId) !== parseInt(user.id) ? (\n                <>{user.name}</>) : (\n                <></>\n              )}\n            </div>\n\n            <div className=\"message-text\">\n              {roll ? (\n                <span>\n                  <em>{roll.diceCount}d{roll.diceFaces}</em> &#8594; <strong>{roll.result}</strong>\n                </span>\n              ) : (\n                <span>\n                  {text}\n                </span>\n              )}\n            </div>\n          </li>\n        )})}\n        <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}>\n        </div>\n      </ul>\n    );\n  }\n}\n\nfunction MessageLoader(props) {\n  const { loading, error, data } = useQuery(GET_MESSAGES, {pollInterval: 500});\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <Messages\n      messages={data.messages}\n      userId={props.userId}\n    />\n  );\n}\n\nfunction Room() {\n  const [verifyUser] = useMutation(VERIFY_USER);\n  const [createUser] = useMutation(CREATE_USER);\n  const [createMessage] = useMutation(CREATE_MESSAGE);\n  const [createRoll] = useMutation(CREATE_ROLL);\n  const [state, stateSet] = React.useState({\n    hasJoined: false,\n    nameInput: '',\n    user: {\n      id: 0,\n      name: 'Guest',\n    },\n    text: '',\n  });\n\n  useEffect(() => {\n    // Check local storage for user info.\n    var hasJoined = localStorage.getItem('hasJoined') === 'true';\n    var userId = localStorage.getItem('userId') ? parseInt(localStorage.getItem('userId')) : 0;\n    var userName = localStorage.getItem('userName') ? localStorage.getItem('userName') : 'Guest';\n    \n    // Verify that user in local storage exists on server.\n    verifyUser({\n      variables: { id: userId, name: userName },\n    }).then(result => {\n      // If it does, continue as that user. If not, need to join.\n      if (result.data.verifyUser) {\n        stateSet({\n          hasJoined: hasJoined,\n          nameInput: '',\n          user: {\n            id: userId,\n            name: userName,\n          },\n          text: '',\n        });\n      } else {\n        stateSet({\n          hasJoined: false,\n          nameInput: '',\n          user: {\n            id: 0,\n            name: 'Guest',\n          },\n          text: '',\n        });\n      }\n    });\n  }, [verifyUser, state.user.id]);\n\n  // Function for handling sending of new messages.\n  const onSendMessage = () => {\n    if (state.text.length > 0) {\n      try {\n        createMessage({\n          variables: { userId: state.user.id, text: state.text },\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    stateSet({\n      ...state,\n      text: '',\n    });\n  }\n\n  // Function for opening and closing the dice tray.\n  const [isDiceMenuOpen, setDiceMenuOpen] = React.useState(false);\n  const onClickDiceMenu = () => {\n    setDiceMenuOpen(!isDiceMenuOpen)\n  }\n\n  // Function for handling rolling of dice.\n  const onRoll = (diceCount, diceFaces) => {\n    try {\n      createRoll({\n        variables: { userId: state.user.id, diceCount: diceCount, diceFaces: diceFaces },\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  // Function for handling creating user model.\n  const onJoin = () => {\n    // Only enable join function for those who haven't joined yet.\n    if (!state.hasJoined) {\n      if (state.nameInput.length > 0) {\n        try {\n          createUser({\n            variables: { name: state.nameInput },\n          }).then(result => {\n            // Update state with assigned user ID and name.\n            stateSet({\n              ...state,\n              user: {\n                id: result.data.createUser.id,\n                name: result.data.createUser.name,\n              },\n              hasJoined: true,\n            });\n\n            localStorage.setItem('hasJoined', true);\n            localStorage.setItem('userId', result.data.createUser.id);\n            localStorage.setItem('userName', result.data.createUser.name);\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n  }\n\n  return (\n    <div id=\"outer-container\" className=\"container\">\n      <h1>Dice Bazaar</h1>\n      <MessageLoader userId={state.user.id} />\n\n      {state.hasJoined ? (\n        <div className=\"form-container has-dice\">\n          <div id=\"dice-modal\" className={isDiceMenuOpen ? \"active\" : null}>\n            <div id=\"dice-menu-icon\" onClick={() => onClickDiceMenu()}>\n              🎲\n            </div>\n            <div id=\"dice-container\" className=\"dice-container\">\n              <button onClick={() => onRoll(1, 100)}>d100</button>\n              <button onClick={() => onRoll(1, 20)}>d20</button>\n              <button onClick={() => onRoll(1, 12)}>d12</button>\n              <button onClick={() => onRoll(1, 10)}>d10</button>\n              <button onClick={() => onRoll(1, 8)}>d8</button>\n              <button onClick={() => onRoll(1, 6)}>d6</button>\n              <button onClick={() => onRoll(1, 4)}>d4</button>\n            </div>\n            <div id=\"dice-container-triangle\" ></div>\n          </div>\n\n          <input\n            type=\"text\"\n            name=\"text\"\n            id=\"text\"\n            autoFocus\n            autoComplete=\"off\"\n            value={state.text}\n            placeholder=\"Enter a message...\"\n            onChange={(e) => stateSet({\n                ...state,\n                text: e.target.value,\n              })\n            }\n            onKeyDown={(e) => {\n              if (e.keyCode === 13) {\n                onSendMessage();\n              }\n            }}\n          />\n\n          <button onClick={() => onSendMessage()}>Send</button>\n        </div>\n      ) : (\n        <div className=\"form-container\"> \n          <input\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            autoFocus\n            autoComplete=\"off\"\n            value={state.nameInput}\n            placeholder=\"Choose a name...\"\n            onChange={(e) => stateSet({\n              ...state,\n              nameInput: e.target.value,\n            })}\n            onKeyDown={(e) => {\n              if (e.keyCode === 13) {\n                onJoin();\n              }\n            }}\n          />\n\n          <button onClick={() => onJoin()}>Join</button>\n        </div>\n      )}\n    </div>\n  )\n};\n\nconst RoomWithProvider = () => (\n  <ApolloProvider client={client}>\n    <Room />\n  </ApolloProvider>\n);\n\nexport default RoomWithProvider;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Room from \"./Room\";\n\nconst App = () => <Room />;\n\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}